import streamlit as st
from huggingface_hub import InferenceClient

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA E ESTADO INICIAL ---

st.set_page_config(page_title="IA's Conta", page_icon="üí°", layout="centered")

# Tenta inicializar o cliente da API do Hugging Face.
try:
    client = InferenceClient(
        model="mistralai/Mistral-7B-Instruct-v0.2",
        token=st.secrets["HUGGINGFACE_API_TOKEN"]
    )
except Exception as e:
    st.error("Erro ao conectar com a API do Hugging Face. Verifique sua chave de API nos Secrets.", icon="üî•")
    st.stop()

# --- 2. FUN√á√ÉO PRINCIPAL DA IA ---

def get_ai_response(historico_conversa):
    """Envia o hist√≥rico para a API e retorna a resposta da IA em tempo real."""
    try:
        response_stream = client.chat_completion(
            messages=historico_conversa, max_tokens=2048, stream=True
        )
        for chunk in response_stream:
            pedaco_texto = chunk.choices[0].delta.content
            if pedaco_texto:
                yield pedaco_texto
    except Exception as e:
        yield f"\n\nDesculpe, ocorreu um erro ao processar sua solicita√ß√£o: {e}"

# --- 3. INICIALIZA√á√ÉO DO ESTADO DA SESS√ÉO ---

# Usamos o 'session_state' para guardar informa√ß√µes entre as intera√ß√µes do usu√°rio
if "messages" not in st.session_state:
    st.session_state.messages = []

# Novo: Controla os passos do formul√°rio
if "step" not in st.session_state:
    st.session_state.step = 1

# Guarda os dados do formul√°rio
if "form_data" not in st.session_state:
    st.session_state.form_data = {}

# --- 4. L√ìGICA DA INTERFACE (UI) ---

st.title("üí° IA's Conta")
st.markdown("Seu assistente financeiro pessoal, pronto para te ajudar a tomar as melhores decis√µes.")

# --- SE√á√ÉO A: QUESTION√ÅRIO INICIAL EM PASSOS ---

# PASSO 1: Informa√ß√µes b√°sicas e objetivos
if st.session_state.step == 1:
    st.info("üëã Ol√°! Vamos come√ßar definindo seu perfil e objetivos.")
    with st.form("step1_form"):
        renda = st.number_input("Qual √© a sua renda mensal aproximada (R$)?", min_value=0.0, step=100.0, format="%.2f")
        objetivos = st.multiselect(
            "Quais s√£o seus principais objetivos financeiros? (Pode marcar mais de um)",
            ["Organizar minhas finan√ßas", "Diminuir meus gastos", "Come√ßar a investir"]
        )
        
        submitted_step1 = st.form_submit_button("Pr√≥ximo")

        if submitted_step1:
            if not objetivos:
                st.error("Por favor, selecione pelo menos um objetivo para continuar.")
            else:
                # Salva os dados do passo 1
                st.session_state.form_data['renda'] = renda
                st.session_state.form_data['objetivos'] = objetivos
                
                # Se o usu√°rio N√ÉO quer investir, pulamos direto para o chat
                if "Come√ßar a investir" not in objetivos:
                    st.session_state.step = "final"
                else: # Caso contr√°rio, vamos para o passo 2
                    st.session_state.step = 2
                st.rerun() # For√ßa o recarregamento da p√°gina para mostrar o pr√≥ximo passo

# PASSO 2: Detalhes sobre investimentos (s√≥ aparece se necess√°rio)
if st.session_state.step == 2:
    st.info("√ìtimo! Agora, vamos entender melhor seu perfil para investimentos.")
    with st.form("step2_form"):
        conhecimento_investimento = st.radio(
            "Qual seu n√≠vel de conhecimento sobre investimentos?",
            [
                "Baixo (sou iniciante, prefiro explica√ß√µes simples)",
                "M√©dio (j√° entendo o b√°sico, como CDB e A√ß√µes)",
                "Alto (tenho experi√™ncia e entendo termos t√©cnicos)"
            ],
            help="Isso nos ajuda a adaptar a linguagem para voc√™."
        )
        perfil_investidor = st.radio(
            "Qual seu perfil de investidor?",
            [
                "Conservador: Priorizo a seguran√ßa do meu dinheiro, mesmo que o retorno seja menor.",
                "Moderado: Busco um equil√≠brio, aceitando um pouco de risco por melhores retornos.",
                "Arrojado: Meu foco √© maximizar os retornos, mesmo que isso signifique correr mais riscos."
            ],
            help="Seu perfil define o tipo de investimento mais adequado para voc√™."
        )
        
        submitted_step2 = st.form_submit_button("Gerar meu plano inicial!")

        if submitted_step2:
            # Salva os dados do passo 2
            st.session_state.form_data['conhecimento_investimento'] = conhecimento_investimento
            st.session_state.form_data['perfil_investidor'] = perfil_investidor
            st.session_state.step = "final" # Marca o formul√°rio como finalizado
            st.rerun() # Recarrega para montar o prompt final e ir para o chat

# PASSO FINAL: Montar o prompt e iniciar o chat
if st.session_state.step == "final" and not st.session_state.messages:
    # Coleta todos os dados salvos
    data = st.session_state.form_data
    perfil_limpo = data.get('perfil_investidor', 'N√£o se aplica').split(':')[0]
    conhecimento_limpo = data.get('conhecimento_investimento', 'N√£o se aplica').split(' ')[0]

    # Cria o perfil do usu√°rio para a IA
    st.session_state.user_profile = {
        "renda": data['renda'],
        "objetivos": ", ".join(data['objetivos']),
        "perfil_investidor": perfil_limpo,
        "conhecimento_investimento": conhecimento_limpo
    }

    # Cria o prompt inicial super completo para a IA
    prompt_inicial = f"""
    Voc√™ √© a IA do "IA's Conta", um assistente financeiro especialista.
    Um usu√°rio com o seguinte perfil detalhado acaba de se cadastrar:
    - Renda Mensal: R$ {st.session_state.user_profile['renda']:,.2f}
    - Objetivos: {st.session_state.user_profile['objetivos']}
    - N√≠vel de conhecimento sobre investimentos: {st.session_state.user_profile['conhecimento_investimento']}
    - Perfil de Investidor: {st.session_state.user_profile['perfil_investidor']}

    Sua primeira tarefa √© gerar tr√™s estrat√©gias iniciais, pr√°ticas e altamente personalizadas para este usu√°rio, levando em conta TODOS os seus objetivos.
    Apresente-as em formato de lista numerada. Use uma linguagem encorajadora, did√°tica e comece com uma sauda√ß√£o de boas-vindas.
    """

    # Cria a mensagem de sistema que dar√° a "personalidade" para a IA
    mensagem_sistema = {
        "role": "system",
        "content": f"""Voc√™ √© a IA do "IA's Conta", um assistente financeiro pessoal, did√°tico e amig√°vel. Voc√™ est√° conversando com um usu√°rio com este perfil: {st.session_state.user_profile}. Sua miss√£o √© ajud√°-lo a atingir seus objetivos. Responda sempre em portugu√™s do Brasil.
        IMPORTANTE: Adapte sua linguagem ao n√≠vel de conhecimento do usu√°rio sobre investimentos ('{st.session_state.user_profile['conhecimento_investimento']}').
        - Se o n√≠vel for 'Baixo', use analogias do dia a dia, evite jarg√µes a todo custo e seja extremamente did√°tico.
        - Se o n√≠vel for 'M√©dio', pode introduzir conceitos como CDB, Selic, A√ß√µes, mas sempre explique-os de forma resumida.
        - Se o n√≠vel for 'Alto', sinta-se √† vontade para usar uma linguagem mais t√©cnica e ir direto ao ponto."""
    }
    st.session_state.messages.append(mensagem_sistema)
    st.session_state.messages.append({"role": "user", "content": prompt_inicial})
    st.rerun()

# --- SE√á√ÉO B: INTERFACE DE CHAT (Aparece ap√≥s o formul√°rio ser preenchido) ---

if st.session_state.step == "final":
    # Exibe todo o hist√≥rico de mensagens
    for message in st.session_state.messages:
        if message["role"] != "system":
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

    # Gera a primeira resposta da IA (se ainda n√£o houver uma)
    if st.session_state.messages[-1]["role"] != "assistant":
        with st.chat_message("assistant"):
            response = st.write_stream(get_ai_response(st.session_state.messages))
        st.session_state.messages.append({"role": "assistant", "content": response})

    # Campo de input para o chat cont√≠nuo
    if prompt := st.chat_input("Digite seus gastos, d√∫vidas ou pe√ßa uma an√°lise..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        with st.chat_message("assistant"):
            response = st.write_stream(get_ai_response(st.session_state.messages))
        st.session_state.messages.append({"role": "assistant", "content": response})
